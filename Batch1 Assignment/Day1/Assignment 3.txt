ASSIGNMENT 3
//Author - Shubham Jain

In JavaScript there are two different kinds of data: primitives, and objects. A primitive is simply a data type that is not an object, and has no methods.
In JS, there are six primitive data types:
	1.)Boolean
	2.)Number
	3.)String
	4.)Null
	5.)Undefined
	6.)Symbol
	7.)BigInt

Boolean======>>

A boolean represents only one of two values: true, or false. Think of a boolean as an on/off or a yes/no switch.
var boo1 = true;
var boo2 = false;

----------

Number======>>

There is only one type of Number in JavaScript. Numbers can be written with or without a decimal point. A number can also be +Infinity, -Infinity, and NaN (not a number).
var num1 = 32;
var num2 = +Infinity;
----------------

String======>>

Strings are used for storing text. Strings must be inside of either double or single quotes. In JS, Strings are immutable (they cannot be changed).
var str1 = 'hello, it is me';
var str2 = "hello, it's me";

--------------

Null======>>

Null has one value: null. It is explicitly nothing.
var nothing = null;
Undefined
A variable that has no value is undefined.
var testVar;
console.log(testVar); // undefined
---------------
Symbol======>>

Symbols are new in ES6. A Symbol is an immutable primitive value that is unique. For the sake of brevity, that is the extent that this article will cover Symbols.
const mySymbol = Symbol('mySymbol');
-----------
BigInt======>>

The BigInt type is a numeric primitive in JavaScript that can represent integers with arbitrary precision. With BigInts, you can safely store and operate on large integers even beyond the safe integer limit for Numbers. A BigInt is created by appending n to the end of an integer or by calling the constructor.

> const x = 2n ** 53n;
9007199254740992n
> const y = x + 1n; 
9007199254740993n

----------------------------------------------------------

OBJECTS:----->

Objects are not a primitive data Type.
An object is a collection of properties. These properties are stored in key/value pairs. Properties can reference any type of data, including objects and/or primitive values.
var obj = {
  key1: 'value',
  key2: 'value',
  key3: true,
  key4: 32,
  key5: {}
}
